# Deploy application on new
# release
name: Deploy Application

on:
  release:
    types:
      - published

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Upload deploy script to S3
        run: |
          aws s3 cp scripts/deploy.sh \
          s3://${{ secrets.AWS_ACCOUNT_ID }}-portfolio-deploy-scripts/

      - name: Trigger rollout deployment from s3 script via SSM
        id: ssm_deploy
        run: |
          INSTANCE="${{ secrets.INSTANCE_ID }}"
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
                'set -euo pipefail',
                'set -x',
                'echo \"1. Creating deployment-scripts folder\"',
                'mkdir -p ~/deployment-scripts',
                'echo \"2. Pulling script from S3\"',
                'aws s3 cp s3://$AWS_ACCOUNT_ID-portfolio-deploy-scripts/deploy.sh ~/deployment-scripts/deploy.sh',
                'echo \"3. Making script executable\"',
                'chmod +x ~/deployment-scripts/deploy.sh',
                'echo \"4. Running script\"',
                '~/deployment-scripts/deploy.sh',
                'echo \"5. Cleaning up\"',
                'rm -rf ~/deployment-scripts'
              ]" \
            --query "Command.CommandId" --output text)
          echo "Command ID: $COMMAND_ID"

          # Wait until command finishes
          STATUS="InProgress"
          while [ "$STATUS" = "InProgress" ]; do
            sleep 5
            STATUS=$(aws ssm get-command-invocation \
              --instance-id "$INSTANCE" \
              --command-id "$COMMAND_ID" \
              --query "Status" --output text)
            echo "Status: $STATUS"

            # Fetch and print logs so far
            echo "[stdout]"
            aws ssm get-command-invocation \
              --instance-id "$INSTANCE" \
              --command-id "$COMMAND_ID" \
              --query "StandardOutputContent" \
              --output text | sed 's/^/[stdout] /'

            echo "[stderr]"
            aws ssm get-command-invocation \
              --instance-id "$INSTANCE" \
              --command-id "$COMMAND_ID" \
              --query "StandardErrorContent" \
              --output text | sed 's/^/[stderr] /'
          done

          EXIT_CODE=$(aws ssm get-command-invocation \
            --instance-id "$INSTANCE" \
            --command-id "$COMMAND_ID" \
            --query "ResponseCode" --output text)
          echo "Exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "❌ Deployment failed"
            exit 1
          fi

          echo "✅ Deployment succeeded"
